<!--作成したパターンの新規投稿ページ-->

<div class="patterns__new">
  <!--ページタイトル-->
  <h3>投稿前パターン情報入力</h3>

  <%= form_with model: @pattern, class: "form-horizontal" do | f | %>
  <!--四方向のマージン（自動入力）-->
  <%= f.hidden_field :margin_top, readonly: true %>
  <%= f.hidden_field :margin_bottom, readonly: true %>
  <%= f.hidden_field :margin_left, readonly: true %>
  <%= f.hidden_field :margin_right, readonly: true %>
  <!--正規化行数列（自動入力）-->
  <%= f.hidden_field :normalized_rows_sequence, readonly: true %>

  <!--パターン名（入力必須）-->
  <div class="form-group">
    <%= f.label :name, 'パターンの名前', class: "col-sm-2 control-label" %>
    <div class="col-sm-10">
      <%= f.text_field :name, class: "form-control" %>
    </div>
  </div>

  <!--カテゴリ選択（デフォルト：未分類）-->
  <div class="form-group">
    <%= f.label :category_id, 'カテゴリ', class: "col-sm-2 control-label" %>
    <div class="col-sm-10">
      <%= f.select :category_id, Category.pluck( :name, :id ).to_h %>
    </div>
  </div>

  <!--表示形式選択（デフォルト：Default 1）-->
  <div class="form-group">
    <%= f.label :display_format_id, 'セルの表示形式', class: "col-sm-2 control-label" %>
    <div class="col-sm-10">
      <%= f.select :display_format_id, DisplayFormat.pluck( :name, :id ).to_h %>
    </div>
  </div>

  <!--このパターン紹介文（入力必須）-->
  <div class="form-group">
    <%= f.label :introduction, 'このパターン紹介文', class: "col-sm-2 control-label" %>
    <div class="col-sm-10">
      <%= f.text_area :introduction, rows: 3, class: "form-control" %>
    </div>
  </div>

  <!--パターンのイメージ-->
  <div class="form-group">
    <%= f.label :iimage_id, class: "col-sm-2 control-label" %>
    <div class="col-sm-10">
      <%= f.attachment_field :image, placeholder: "アピール画像" %>
    </div>
  </div>

  <!--投稿ボタン-->
  <%= f.submit "これで投稿する", class: "btn btn-primary"%>
  <% end %>

  <!--登校前パターンのプレビュー（エミュレート）画面-->
  <%= render 'patterns/emulation' %>
</div>

<script>
  $( function() {
    // 画像アップロード時にサムネイルを表示するメソッド
    $("#pattern_image").change( function() {
      // ファイル情報取得
      let upLoadFile = $(this).prop("files")[0];
      // 投稿済みの画像があった場合は除く
      $(".patterns__new--img").remove();
      // 画像でない場合はそのファイルを削除・強制終了
      if ( ! upLoadFile.type.match("image.*") ) {
        $(this).val(""); // クリア
        callMessageWindow( 'danger', '画像以外のファイルは投稿できません。' )
        return false;
      }
      let reader = new FileReader();
      reader.onload = function() {
        // imgタグに必要な情報を追加
        var img_src = $("<img>").attr( "src", reader.result ).attr( "class", "patterns__new--img" );
        // imgタグの挿入
        $("#pattern_image").after( img_src );
      }
      // 画像表示
      reader.readAsDataURL( upLoadFile );
    });

    // 表示形式のプルダウンリストの値が変化した際に発動するメソッド
    $("#pattern_display_format_id").change( function( info ) {
      // 選択されたDisplayFormatのIDを取得
      let display_format_id = $(this).val();

      // IDからDisplayFormatのデータを取得
      $.ajax({
        url: `/display_formats/${ display_format_id }`,
        type: 'get',
        dataType : 'json'

      }).done( function(data){
        // 成功した場合
        // console.log('通信成功');
        //セルの状態表示反映（lifegame/environments.js参照）
        initializeLifeGame( false, false, data );

      }).fail( function(data) {
        // 失敗した場合
        // console.log('通信失敗');
      });
      return false;
    });
  });
</script>
